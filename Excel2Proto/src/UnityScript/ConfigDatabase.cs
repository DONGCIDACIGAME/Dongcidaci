/*
 * Author:   Triniti Interactive
 * Copyright (c) Triniti Interactive All rights reserved.
 * 2018-12-7 
 * This code is licensed under the MIT License (MIT).
 * THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
 * ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
 * IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
 * PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
 */
 
/// <summary>
/// HOW TO USE
/// 1.Initialize: Call TrinitiConfigData.ConfigDatabase.CreateInstance(configdata_namespace)
/// 2.If you want to load local data: Call LoadFromLocalResources(). This method parse the summmary in resource folder and load each workbook data
/// 3.If you want to load specific data: Call LoadDataFromBytes(workbookname, databyes)
/// </summary>
using UnityEngine;
using System;
using System.Collections.Generic;
using System.Reflection;

namespace TrinitiConfigData
{
    public class ConfigDatabase
    {        
        private static ConfigDatabase _instance;

        private readonly string _dbNameSpace;
        private Dictionary<string, object> _databaseDic = new Dictionary<string, object>();

        public static ConfigDatabase CreateInstance(string strDbNameSpace)
        {
            return _instance = new ConfigDatabase(strDbNameSpace);
        }
        public static T Get<T>() where T : class { return _instance.GetDatabase<T>(); }

        public void Dispose()
        {
            _databaseDic.Clear();
            _instance = null;
        }

        public ConfigDatabase(string strDbNameSpace)
        {
            this._dbNameSpace = strDbNameSpace;
        }

        private T GetDatabase<T>() where T : class
        {
            string strKey = typeof(T).ToString();
            T db = null;
            if(_databaseDic.ContainsKey(strKey))
            {
                db = (T)_databaseDic[strKey];
            }
            else
            {
                string strLoadedMap = "";
                foreach (var loadedDb in _databaseDic.Keys)
                    strLoadedMap += loadedDb + "\n";
                UnityEngine.Debug.LogError($"database {strKey} cound not be found in the map :{strLoadedMap}");                
            }
            return db;
        }

        //parse from binary file to create object
        //the static field name generated by protobuf 
        private const string PARSER_MEMBER_NAME = "_parser";
        //the function generated by protobuf 
        private const string PARSER_FUNCTION_NAME = "ParseFrom";
        private const string PROTOBUF_WORKBOOK_CLASS_SUFFIX = "_Data";
		
        private void LoadDataFromBytes(string strWorkBookDataName, byte[] bytes)
        {
            string strWorkbookClassName = $"{_dbNameSpace}.{strWorkBookDataName}{PROTOBUF_WORKBOOK_CLASS_SUFFIX}";
            Assembly assembly = Assembly.GetExecutingAssembly();
            Type excelDataType = assembly.GetType(strWorkbookClassName);
            FieldInfo parserField = excelDataType.GetField(PARSER_MEMBER_NAME, BindingFlags.Static | BindingFlags.NonPublic);
            object objParser = parserField.GetValue(null);
            MethodInfo method = parserField.FieldType.GetMethod(PARSER_FUNCTION_NAME, new Type[] { typeof(byte[]) });
            object data = method.Invoke(objParser, new object[] { bytes });
            _databaseDic.Add(strWorkbookClassName, data);
        }

        public void LoadFromLocalResources()
        {
            TextAsset localConfigsSummary = Resources.Load("summary") as TextAsset;
            if (localConfigsSummary != null)
            {
                string[] fileNames = localConfigsSummary.text.Split('\n');
                foreach (var fileName in fileNames)
                {
                    if (string.IsNullOrEmpty(fileName)) continue;
                    string[] splitedName = fileName.Split('.');
                    string strFileNameWithoutExt = splitedName[0];
                    LoadDataFromBytes(strFileNameWithoutExt, (Resources.Load(strFileNameWithoutExt) as TextAsset).bytes);
                }
            }
        }
    }
}


